--row_number
select e.*
row_number() over() as rn   //we have not assigned any column inside the over
from employee as e          // sql will treat every record as window and give the 
                            // unique number to each record


select e.*,
row_number() over(partition by dept_name) as rn
from employee as e

//In this query we have passed the column name so for  every record one
//window will be created and Every window every time one row_number() function
//will be called and every time 1 unique no will be given starting from 1 and no of record to \
// this department


//Question give me top 2 record from the department based on job id (it depened when they joined)

select * from (
    select e.*,
    row_number() over (partition by dep_name order by emp_id) as rn
    from employee as e) as x
where x.rn <3;


-- RANK

--fetch the top 3 employee in each department earning the max salary

select * from (
select e.*
rank() over(partition by department order by salary desc) as rnk
from employee e;
) as x
where x.rnk<4


--- Dense_rank

select * from (
select e.*
rank() over(partition by department order by salary desc) as rnk
Dense_rank() over(partition by department order by salary desc) as dense_rnk
from employee e;
) as x
where x.rnk<4


//Dense Rank and rank
           Rank   Dense_rank  row_num
x    2      1       1           1
y    3      2       2           2
z    3      2       2           3
A    4      4       3           4
b    5      4       4           5


Question: Fetch a query to display if the salary of an employee is Higher,lower,lower or equal to the previous employee



select e.* ,
lag(salary,2,0) over(partition by dep_name order by emp_id) as previous_emp_salary
lead(salary,2,0) over(partition by dep_name order by emp_id) as previous_emp_salary
from employee e;

Some default argument of  : lag(column_name,previous_continues_record_to_look,defualt_value)
Lead check next value

select e.*
lag(salary) over(partition by dep_name order by emp_id) as previous_emp_salary
case when e.salary > lag(salary) over(partition by dep_name order by emp_id) then "Higher than previous employee"
     when e.salary < lag(salary) over(partition by dep_name order by emp_id) then "lower than previous employee"
     when e.salary = lag(salary) over(partition by dep_name order by emp_id) then "Same as than previous employee"
end sal_range
from employee as e

